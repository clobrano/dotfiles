# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# Configuration directories
export TOOLKIT=$HOME/toolkit
export DOTFILES=PLACEHOLDER
export EDITOR="gvim -f"
export CDPATH=$HOME/workspace

COLORTERM=gnome-terminal
TERM=xterm-256color
function smart_path() {
  echo $(python "$DOTFILES"/bash/bash_prompt.py )
}

PS1='$(smart_path)$(__git_ps1)‚ùØ '

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# Add timestamp to history
export HISTTIMEFORMAT="%d/%m/%y %T "

# Golang paths
export GOPATH=$HOME/workspace/gocode/
export GOBIN=${GOPATH}bin
export PATH=$PATH:${GOBIN}


# Export paths
ANDROID_REPO=$HOME/external/bin/
PATH=$PATH:$HOME/workspace/scripts
PATH=$PATH:$DOTFILES
PATH=$PATH:$ANDROID_REPO

# Enable gcc colours, available since gcc 4.9.0
GCC_COLORS=1

# Fix ZSH_VERSION unbound variable
ZSH_VERSION=${ZSH_VERSION-"none"}

# Let's have core dumps
ulimit -c unlimited

# GIT aliases
source $DOTFILES/git/aliases.sh

# Other useful aliases
alias binit='source ~/.bashrc'
alias cppcheck_all='raffaello --file=cppcheck.cfg --- cppcheck --enable=all --inconclusive'
alias dmesg-w='dmesg -wH | raffaello -p dmesg'
alias installedbyme="comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)"
alias ll='ls -l'
alias memusage='du -h -t 10M -d 1'
alias dirusage='du -d1 -t10M -h 2>/dev/null | sort -hr'
alias psaux='ps aux | grep'
alias soundindicatorback='gsettings set com.canonical.indicator.sound visible true'
alias xcopy='xclip'
alias xpaste='xclip -o'
alias nvimd='nvim -c Dark'

source $DOTFILES/bash/modemmanager_aliases.sh
source $DOTFILES/bash/networkmanager_aliases.sh
alias altair-connet='telnet 10.0.0.1'
alias ALTgdb-glibc='/opt/altair/cs_mips-2014.05/usr/bin/mips-linux-gnu-gdb'
alias kill-linux-app='ssh root@10.0.0.1 kill'
alias linux-app-pid='ssh root@10.0.0.1 pidof LE866A1_KK.sct'
alias linux-app-kill='ssh root@10.0.0.1 kill'
alias usif0='sudo minicom -D /dev/ttyS0'
alias usif1='sudo minicom -D /dev/ttyS1'
alias pusif0='sudo pynicom --port=/dev/ttyS0'
alias pusif1='sudo pynicom --port /dev/ttyS1'

alias nvimg='nvim -c Gruvbox'
alias nvimm='nvim -c Monokai'
alias gvimm='gvim -c Monokai'

# Let's do configuration
letsbin=$(which lets)
if [ ! -z ${letsbin:x} ]; then
    export LETSDO_COLOR=1
    if [ -f $HOME/.letsdo_completion ]; then
	source $HOME/.letsdo_completion
    fi
fi

alias gvim='gvim -geom 800:400'

if [ -f $DOTFILES/bash/modemmanager_aliases.sh ]; then
	source $DOTFILES/bash/modemmanager_aliases.sh
fi
if [ -f $DOTFILES/bash/networkmanager_aliases.sh ]; then
	source $DOTFILES/bash/networkmanager_aliases.sh
fi

if [ -f $DOTFILES/git/aliases.sh ]; then
	source $DOTFILES/git/aliases.sh
fi
PATH=~/.local/bin:$PATH

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
alias letsdo='letsdo -c'
alias node='nodejs'

# Disable terminal freeze shortcut C-s
stty -ixon
